{"version":3,"file":"5447.16030948073d9e60.js","mappings":"8NAKA,MAAMA,EAAiB,CACrB,CACEC,KAAM,GACNC,UCOqB,UAAAC,EAAnB,MAAOC,EAGXC,YACUC,EACAC,EACAC,EACAC,EACAC,EACAC,GALAC,KAAAN,eACAM,KAAAL,QACAK,KAAAJ,mBACAI,KAAAH,kBACAG,KAAAF,SACAE,KAAAD,cARVC,KAAAC,SAAkB,CAAEC,QAAS,KAAMC,QAAS,GASzC,CAEHC,WACEJ,KAAKK,WACP,CAEAA,YACE,MAAMC,EAAQN,KAAKJ,iBAAiBW,WAChCD,IACFN,KAAKC,SAAWK,EAEpB,CAEME,YAAS,IAAAC,EAAAT,KAAA,SAAAU,KAAA,YAEb,WAAYD,EAAKE,uBACf,OAGF,IAAIC,EAAU,GAEd,GAAmBC,aADOJ,EAAKf,aAAaoB,aAAaL,EAAKR,SAASC,UACzC,CAC5B,MAAMA,QAAgBO,EAAKf,aAAaqB,SAASN,EAAKR,SAASC,QAASO,EAAKR,SAASE,SACtFM,EAAKR,SAASC,QAAUA,EACxBU,EAAU,SAASV,2BACrB,YACQO,EAAKf,aAAasB,YAAYP,EAAKR,SAASC,QAASO,EAAKR,SAASE,SACzES,EAAU,SAASH,EAAKR,SAASC,8CAIfO,EAAKZ,gBAAgBoB,OAAO,CAC9CC,OAAQ,UACRN,QAASA,EACTO,QAAS,CACP,CACEC,KAAM,KACNC,QAASA,KAEPZ,EAAKX,OAAOwB,SAAS,CAAC,UAAS,OAM3BC,SAAU,EAhCT,EAiCf,CAEMC,UAAUN,EAAgBN,GAAe,IAAAa,EAAAzB,KAAA,SAAAU,KAAA,wBACzBe,EAAK5B,gBAAgBoB,OAAO,CAC9CC,OAAQA,EACRN,QAASA,EACTO,QAAS,CAAC,SAGAI,SAAU,EAPuB,EAQ/C,CAEAG,eACE1B,KAAKF,OAAOwB,SAAS,CAAC,UACxB,CAEMK,yBAAsB,IAAAC,EAAA5B,KAAA,SAAAU,KAAA,YAC1B,MAAMmB,QAAeD,EAAKlC,aAAaoC,eACjCC,EAAaH,EAAK3B,SAASE,QAAQ6B,MAAM,KAAKC,IAAIC,QAExD,UAAWC,KAAaJ,EACtB,UAAWzB,KAASuB,EAElB,GADwBvB,EAAMH,QAAQ6B,MAAM,KAAKC,IAAIC,QACjCE,SAASD,IAAc7B,EAAMJ,UAAY0B,EAAK3B,SAASC,QACzE,aAAM0B,EAAK7B,YAAYyB,UAAU,0BAAqB,UAAUW,uCAAyC7B,EAAMJ,aACxG,EAKb,OAAO,CAAK,EAdc,EAe5B,CAEAmC,mBAAmBlC,GACjB,MAAMmC,EAAanC,EAAQ6B,MAAM,KAAKC,IAAIM,GAAQA,EAAKC,QACjDC,EAAW,IAAIC,IAAIJ,GACzB,OAAOA,EAAWK,SAAWF,EAASG,IACxC,CAEMjC,sBAAmB,IAAAkC,EAAA7C,KAAA,SAAAU,KAAA,YAEvB,IAAKmC,EAAK5C,SAASC,UAAY2C,EAAK5C,SAASE,QAC3C,aAAM0C,EAAK9C,YAAYyB,UAAU,OAAQ,4CAClC,EAKT,IADqB,QACHsB,KAAKD,EAAK5C,SAASC,QAAQ6C,YAC3C,aAAMF,EAAK9C,YAAYyB,UAAU,OAAQ,iDAClC,EAQT,GAJAqB,EAAK5C,SAASE,QAAU0C,EAAK5C,SAASE,QAAQ6C,QAAQ,aAAc,KAE/C,iBAEHF,KAAKD,EAAK5C,SAASE,SACnC,aAAM0C,EAAK9C,YAAYyB,UAAU,OAAQ,+DAClC,EAIT,MAAMlB,EAAQuC,EAAKjD,iBAAiBW,YAC5B0C,UAASC,kBAAmBL,EAAKnD,aAAayD,cAAcN,EAAK5C,SAASE,SAClF,KAAK8C,GAAiB,MAAL3C,KAAOH,SAAiB,MAALG,KAAOJ,SAA8BW,OAAb,MAALP,OAAK,EAALA,EAAOJ,WAA6B,MAALI,OAAK,EAALA,EAAOJ,UAAW2C,EAAK5C,SAASC,SACpH,aAAM2C,EAAK9C,YAAYyB,UAAU,OAAQ0B,IAClC,EAIT,MAAME,QAAsBP,EAAKnD,aAAaoB,aAAa+B,EAAK5C,SAASC,SACzE,OAAIkD,IAAsB,MAAL9C,OAAK,EAALA,EAAOJ,SAAU,SAC9B2C,EAAK9C,YAAYyB,UAAU,OAAQ,WAAW4B,EAAclD,kCAC3D,aAIG2C,EAAKlB,2BAKbkB,EAAKR,mBAAmBQ,EAAK5C,SAASE,iBAClC0C,EAAK9C,YAAYyB,UAAU,OAAQ,qDAClC,GAGG,EAlDW,EAmDzB,WAlJWhC,0CAAY6D,MAAAC,KAAAD,MAAAE,MAAAF,MAAAG,KAAAH,MAAAI,MAAAJ,MAAAE,MAAAF,MAAAK,KAAA,0BAAZlE,EAAYmE,UAAA,mBAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,4VAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICXrBX,MAFJ,iBAEIA,CAF6B,gBAE7BA,CADW,mBAETA,MAAA,qBACFA,QACAA,MAAA,eAAWA,MAAA,wBAEfA,YAIIA,MAFJ,gBAEIA,CAFS,aAETA,CADQ,iBACsBA,MAAA,wBAAeA,QAC7CA,MAAA,kBAA6CA,MAAA,yBAAAa,GAAAb,aAAAY,EAAAhE,SAAAC,QAAAgE,KAAAD,EAAAhE,SAAAC,QAAAgE,IAAA,GAC/Cb,UAEEA,MADF,cACEA,CADQ,kBACsBA,MAAA,uCAA6BA,QAC3DA,MAAA,kBAA2CA,MAAA,yBAAAa,GAAAb,aAAAY,EAAAhE,SAAAE,QAAA+D,KAAAD,EAAAhE,SAAAE,QAAA+D,IAAA,GAC7Cb,UACAA,MAAA,mBAA2BA,MAAA,0BAASY,EAAAzD,WAAW,GAAE6C,MAAA,aAAMA,QACvDA,MAAA,mBAA6CA,MAAA,0BAASY,EAAAvC,cAAc,GAAE2B,MAAA,eACxEA,iBApBYA,MAAA,kBAYqCA,MAAA,IAAAA,MAAA,UAAAY,EAAAhE,SAAAC,SAIFmD,MAAA,GAAAA,MAAA,UAAAY,EAAAhE,SAAAE,kGDHlCX,CAAY,ODClB,IAAM2E,EAAyB,UAAAC,EAAhC,MAAOD,qDAAyB,yBAAzBA,gCAHDE,KAAaC,SAASlF,GACtBiF,QAECF,CAAyB,KGFzBI,EAAkB,UAAAC,EAAzB,MAAOD,qDAAkB,yBAAlBA,gCAHDE,KAAcC,KAAaC,KAAaR,KAGvCI,CAAkB","names":["routes","path","component","_CadbombaPage","CadbombaPage","constructor","bombaService","route","bombaDataService","alertController","router","utilService","this","newBomba","idbomba","idbicos","ngOnInit","loadBomba","bomba","getBomba","saveBomba","_this","_asyncToGenerator","validacoesSaveBomba","message","undefined","getBombaById","addBomba","updateBomba","create","header","buttons","text","handler","navigate","present","showAlert","_this2","voltarPagina","validaBicoJaCadastrado","_this3","bombas","getAllBombas","bicosInput","split","map","Number","bicoInput","includes","temBicosDuplicados","bicosArray","bico","trim","bicosSet","Set","length","size","_this4","test","toString","replace","isValid","mensagem","validateBicos","bombaJaExiste","i0","i1","i2","i3","i4","i5","selectors","decls","vars","consts","template","rf","ctx","$event","CadbombaPageRoutingModule","_CadbombaPageRoutingModule","RouterModule","forChild","CadbombaPageModule","_CadbombaPageModule","CommonModule","FormsModule","IonicModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/pages/cadastro/cadbomba/cadbomba-routing.module.ts","./src/app/pages/cadastro/cadbomba/cadbomba.page.ts","./src/app/pages/cadastro/cadbomba/cadbomba.page.html","./src/app/pages/cadastro/cadbomba/cadbomba.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CadbombaPage } from './cadbomba.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CadbombaPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CadbombaPageRoutingModule {}\n","// src/app/pages/cadbomba/cadbomba.page.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BombaService } from '../../../services/bomba/bomba.service';\nimport { Bomba } from '../../../services/database.service';\nimport { BombaDataService } from '../../../services/bomba-data/bomba-data.service';\nimport { AlertController } from '@ionic/angular';\nimport { UtilService } from '../../../services/util/util.service';\n\n@Component({\n  selector: 'app-cadbomba',\n  templateUrl: './cadbomba.page.html',\n  styleUrls: ['./cadbomba.page.scss']\n})\nexport class CadbombaPage implements OnInit {\n  newBomba: Bomba = { idbomba: null, idbicos: '' };\n\n  constructor(\n    private bombaService: BombaService,\n    private route: ActivatedRoute,\n    private bombaDataService: BombaDataService,\n    private alertController: AlertController,\n    private router: Router,\n    private utilService: UtilService,\n  ) {}\n\n  ngOnInit() {\n    this.loadBomba();\n  }\n\n  loadBomba() {\n    const bomba = this.bombaDataService.getBomba();\n    if (bomba) {\n      this.newBomba = bomba;\n    }\n  }\n\n  async saveBomba() {\n    // Validações antes de salvar a bomba\n    if (!(await this.validacoesSaveBomba())) {\n      return;\n    }\n\n    let message = '';\n    const bombaExiste = await this.bombaService.getBombaById(this.newBomba.idbomba);\n    if (bombaExiste == undefined) {\n      const idbomba = await this.bombaService.addBomba(this.newBomba.idbomba, this.newBomba.idbicos);\n      this.newBomba.idbomba = idbomba;\n      message = `Bomba ${idbomba} adicionada com sucesso!`;\n    } else {\n      await this.bombaService.updateBomba(this.newBomba.idbomba, this.newBomba.idbicos);\n      message = `Bomba ${this.newBomba.idbomba} atualizada com sucesso!`;\n    }\n\n    // Exibir alerta de sucesso\n    const alert = await this.alertController.create({\n      header: 'Sucesso',\n      message: message,\n      buttons: [\n        {\n          text: 'OK',\n          handler: () => {\n            // Redirecionar para a página bomba após clicar em OK\n            this.router.navigate(['/bomba']);\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  async showAlert(header: string, message: string) {\n    const alert = await this.alertController.create({\n      header: header,\n      message: message,\n      buttons: ['OK']\n    });\n\n    await alert.present();\n  }\n\n  voltarPagina() {\n    this.router.navigate(['/bomba']);\n  }\n\n  async validaBicoJaCadastrado(): Promise<boolean> {\n    const bombas = await this.bombaService.getAllBombas();\n    const bicosInput = this.newBomba.idbicos.split(',').map(Number);\n\n    for (const bicoInput of bicosInput) {\n      for (const bomba of bombas) {\n        const bicosExistentes = bomba.idbicos.split(',').map(Number);\n        if (bicosExistentes.includes(bicoInput) && bomba.idbomba !== this.newBomba.idbomba) {\n          await this.utilService.showAlert('Erro de Validação', `O bico ${bicoInput} já está cadastrado na bomba ${bomba.idbomba}.`);\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  temBicosDuplicados(idbicos: string): boolean {\n    const bicosArray = idbicos.split(',').map(bico => bico.trim());\n    const bicosSet = new Set(bicosArray);\n    return bicosArray.length !== bicosSet.size;\n  }\n\n  async validacoesSaveBomba(): Promise<boolean> {\n    // Validação de campos obrigatórios\n    if (!this.newBomba.idbomba || !this.newBomba.idbicos) {\n      await this.utilService.showAlert('Erro', 'Todos os campos são obrigatórios.');\n      return false;\n    }\n\n    // Validação de idbomba para aceitar apenas números\n    const idbombaRegex = /^\\d+$/;\n    if (!idbombaRegex.test(this.newBomba.idbomba.toString())) {\n      await this.utilService.showAlert('Erro', 'O campo Bomba deve conter apenas números.');\n      return false;\n    }\n    \n    // Validação de idbicos para aceitar apenas números e vírgulas, e remover vírgulas no início ou no fim\n    this.newBomba.idbicos = this.newBomba.idbicos.replace(/(^,)|(,$)/g, '');\n    \n    const idbicosRegex = /^(\\d+)(,\\d+)*$/;\n    \n    if (!idbicosRegex.test(this.newBomba.idbicos)) {\n      await this.utilService.showAlert('Erro', 'O campo Bicos deve conter apenas números e vírgulas.');\n      return false;\n    }\n    \n    // Validação de bicos duplicados\n    const bomba = this.bombaDataService.getBomba();\n    const { isValid, mensagem } = await this.bombaService.validateBicos(this.newBomba.idbicos);\n    if (!isValid && !bomba?.idbicos && !bomba?.idbomba && (bomba?.idbomba != undefined && bomba?.idbomba != this.newBomba.idbomba)) {\n      await this.utilService.showAlert('Erro', mensagem);\n      return false;\n    }\n    \n    //Valida Bomba duplicado\n    const bombaJaExiste = await this.bombaService.getBombaById(this.newBomba.idbomba);\n    if (bombaJaExiste && bomba?.idbomba > 0) {\n      await this.utilService.showAlert('Erro', `A Bomba ${bombaJaExiste.idbomba} já foi cadastrada.`);\n      return false;\n    }\n    \n    // Verificar se algum bico já está cadastrado em outra bomba\n    if (!(await this.validaBicoJaCadastrado())) {\n      return false;\n    }\n\n    // Verificação de duplicidade de bicos informados pelo usuario\n    if (this.temBicosDuplicados(this.newBomba.idbicos)) {\n      await this.utilService.showAlert('Erro', 'Há bicos duplicados no campo Bicos. Verifique.');\n      return false;\n    }\n\n    return true;\n  }\n}\n","<!-- src/app/pages/cadbomba/cadbomba.page.html -->\n\n<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>Cadastro de Bombas</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-item>\n    <ion-label position=\"stacked\">Código da Bomba</ion-label>\n    <ion-input type=\"number\" inputmode=\"numeric\" [(ngModel)]=\"newBomba.idbomba\" placeholder=\"Digite o código da bomba\"></ion-input>\n  </ion-item>\n  <ion-item>\n    <ion-label position=\"stacked\">Bicos (separados por vírgula)</ion-label>\n    <ion-input type=\"text\" inputmode=\"decimal\" [(ngModel)]=\"newBomba.idbicos\" placeholder=\"Digite os bicos\"></ion-input>\n  </ion-item>\n  <ion-button expand=\"block\" (click)=\"saveBomba()\">Gravar</ion-button>\n  <ion-button expand=\"block\" color=\"secondary\" (click)=\"voltarPagina()\">Cancelar</ion-button>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CadbombaPageRoutingModule } from './cadbomba-routing.module';\n\nimport { CadbombaPage } from './cadbomba.page';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, CadbombaPageRoutingModule],\n  declarations: [CadbombaPage]\n})\nexport class CadbombaPageModule {}\n"],"x_google_ignoreList":[]}