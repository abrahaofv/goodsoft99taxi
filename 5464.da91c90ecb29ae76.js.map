{"version":3,"file":"5464.da91c90ecb29ae76.js","mappings":"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","names":["i0","tipoproduto_r1","routes","path","component","_CadcombustivelPage","CadcombustivelPage","constructor","combustivelService","route","combustivelDataService","alertController","router","bombaService","utilService","produtoService","this","newCombustivel","id","nome","idbicos","idbombas","preco","tipoproduto","status","ehcombustivel","ncm","anp","codigobarras","tiposproduto","ngOnInit","loadCombustivel","combustivel","getCombustivel","saveCombustivel","_this","_asyncToGenerator","showAlert","replace","test","toString","combustivelCarregado","undefined","combustivelJaExiste","getCombustivelById","validaSeBombasEBicosExistem","combustivelBicoJaCadastrado","bicoJaExisteNoCombustivel","combustiveisDiferentes","bicoDuplicado","retornaBicoDuplicado","console","log","deleteCombustivel","message","addCombustivel","updateCombustivel","sincronizarCombustivel","create","header","buttons","text","handler","navigate","present","_this2","bicosUsuario","split","map","bico","trim","combustivelBicosArray","includes","_this3","combustiveis","getAllCombustiveis","userBico","voltarPagina","_this4","bombas","getAllBombas","bombasInput","Number","bicosInput","bombaInput","bombaExiste","bomba","idbomba","bicosArray","forEach","push","bicoInput","retornaStatusString","_this5","statusString","corpo","codigoProduto","Descricao","tipoProduto","verificarEConverterPreco","ehCombustivel","codigoBarras","cupom","sincronizarProdutoSingle","JSON","stringify","trace_Id","statusCode","errmsg","error","errorMsg","HttpErrorResponse","i1","i2","i3","i4","i5","i6","i7","selectors","decls","vars","consts","template","rf","ctx","$event","CadcombustivelPage_ion_select_option_19_Template","CadcombustivelPageRoutingModule","_CadcombustivelPageRoutingModule","RouterModule","forChild","CadcombustivelPageModule","_CadcombustivelPageModule","CommonModule","FormsModule","IonicModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/pages/cadastro/cadcombustivel/cadcombustivel.page.html","./src/app/pages/cadastro/cadcombustivel/cadcombustivel-routing.module.ts","./src/app/pages/cadastro/cadcombustivel/cadcombustivel.page.ts","./src/app/pages/cadastro/cadcombustivel/cadcombustivel.module.ts"],"sourcesContent":["<!-- src/app/pages/cadcombustivel/cadcombustivel.page.html -->\n\n<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-menu-button></ion-menu-button>\n    </ion-buttons>\n    <ion-title>Cadastro de Combustível</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-item>\n    <ion-label position=\"stacked\">Código</ion-label>\n    <ion-input type=\"number\" inputmode=\"numeric\" [(ngModel)]=\"newCombustivel.id\" placeholder=\"Digite o código do combustível\"></ion-input>\n  </ion-item>\n\n  <ion-item>\n    <ion-label position=\"stacked\">Nome</ion-label>\n    <ion-input [(ngModel)]=\"newCombustivel.nome\" placeholder=\"Digite o nome\"></ion-input>\n  </ion-item>\n\n  <ion-item lines=\"full\">\n    <ion-label position=\"stacked\">Tipo de produto</ion-label>\n    <ion-select [(ngModel)]=\"newCombustivel.tipoproduto\" required>\n      <ion-select-option *ngFor=\"let tipoproduto of tiposproduto\" [value]=\"tipoproduto\">{{ tipoproduto }}</ion-select-option>\n    </ion-select>\n  </ion-item>\n\n  <ion-item>\n    <ion-label position=\"stacked\">Preço</ion-label>\n    <ion-input [(ngModel)]=\"newCombustivel.preco\" type=\"text\" inputmode=\"decimal\" placeholder=\"Digite o preço\"></ion-input>\n  </ion-item>\n\n  <ion-item>\n    <ion-label position=\"stacked\">Bombas (separadas por vírgula)</ion-label>\n    <ion-input [(ngModel)]=\"newCombustivel.idbombas\" type=\"text\" inputmode=\"decimal\" placeholder=\"Digite as bombas\"></ion-input>\n  </ion-item>\n\n  <ion-item>\n    <ion-label position=\"stacked\">Bicos (separados por vírgula)</ion-label>\n    <ion-input [(ngModel)]=\"newCombustivel.idbicos\" type=\"text\" inputmode=\"decimal\" placeholder=\"Digite os bicos\"></ion-input>\n  </ion-item>\n\n  <ion-item>\n    <ion-label position=\"stacked\">NCM</ion-label>\n    <ion-input [(ngModel)]=\"newCombustivel.ncm\" type=\"number\" inputmode=\"numeric\" placeholder=\"Digite o NCM\"></ion-input>\n  </ion-item>\n\n  <ion-item>\n    <ion-label position=\"stacked\">ANP</ion-label>\n    <ion-input [(ngModel)]=\"newCombustivel.anp\" type=\"number\" inputmode=\"numeric\" placeholder=\"Digite o ANP\"></ion-input>\n  </ion-item>\n\n  <ion-item>\n    <ion-label position=\"stacked\">Código de Barras</ion-label>\n    <ion-input [(ngModel)]=\"newCombustivel.codigobarras\" type=\"number\" inputmode=\"numeric\" placeholder=\"Digite o Código de Barras\"></ion-input>\n  </ion-item>\n\n  <ion-item>        \n    <ion-checkbox labelPlacement=\"end\" justify=\"start\" [(ngModel)]=\"newCombustivel.status\">Status (Ativo ou Inativo)\n    </ion-checkbox>\n  </ion-item>\n\n  <ion-button expand=\"block\" (click)=\"saveCombustivel()\">Gravar</ion-button>\n  <ion-button expand=\"block\" color=\"secondary\" (click)=\"voltarPagina()\">Cancelar</ion-button>\n</ion-content>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CadcombustivelPage } from './cadcombustivel.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CadcombustivelPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CadcombustivelPageRoutingModule {}\n","// src/app/pages/cadcombustivel/cadcombustivel.page.ts\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CombustivelService } from '../../../services/combustivel/combustivel.service';\r\nimport { Combustivel } from '../../../services/database.service';\r\nimport { CombustivelDataService } from '../../../services/combustivel-data/combustivel-data.service';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { BombaService } from '../../../services/bomba/bomba.service';\r\nimport { UtilService } from '../../../services/util/util.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { Produto } from 'src/app/shared/models/produto.model';\r\nimport { ProdutoService } from 'src/app/core/services/produto.service';\r\nimport { sincronizarProdutoSingleRequest } from '../../../shared/models/sincronizarProdutoSingle.request.model';\r\n\r\n@Component({\r\n  selector: 'app-cadcombustivel',\r\n  templateUrl: './cadcombustivel.page.html',\r\n  styleUrls: ['./cadcombustivel.page.scss']\r\n})\r\nexport class CadcombustivelPage implements OnInit {\r\n  newCombustivel: Combustivel = { \r\n    id: null, \r\n    nome: '', \r\n    idbicos: '', \r\n    idbombas: '', \r\n    preco: 0.0, \r\n    tipoproduto: '',\r\n    status: true,\r\n    ehcombustivel: true,\r\n    ncm: '',\r\n    anp: '',\r\n    codigobarras: ''};\r\n\r\n  combustiveisDiferentes: boolean;\r\n  erroMsgApi: string;\r\n\r\n  tiposproduto: string[] = ['ETANOL',\r\n  'ETANOL_ADITIVADO',\r\n  'GASOLINA',\r\n  'GASOLINA_ADITIVADA',\r\n  'DIESEL',\r\n  'DIESEL_S500_ADITIVADO',\r\n  'DIESEL_ADITIVADO',\r\n  'DIESEL_S10_ADITIVADO',\r\n  'GASOLINA_PODIUM',\r\n  'GASOLINA_PREMIUM',\r\n  'GNV',\r\n  'ARLA32',\r\n  'QUEROSENE',\r\n  'GASOLINA_TROCA_OLEO',\r\n  'PONTUACAO',\r\n  'OUTRO'];\r\n\r\n  constructor(\r\n    private combustivelService: CombustivelService,\r\n    private route: ActivatedRoute,\r\n    private combustivelDataService: CombustivelDataService,\r\n    private alertController: AlertController,\r\n    private router: Router,\r\n    private bombaService: BombaService,\r\n    private utilService: UtilService,\r\n    private produtoService: ProdutoService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadCombustivel();\r\n  }\r\n\r\n  loadCombustivel() {\r\n    const combustivel = this.combustivelDataService.getCombustivel();\r\n    if (combustivel) {\r\n      this.newCombustivel = combustivel;\r\n    }\r\n  }\r\n\r\n  async saveCombustivel() {\r\n    // Validação de campos obrigatórios\r\n    if (\r\n      !this.newCombustivel.nome ||\r\n      !this.newCombustivel.idbicos ||\r\n      !this.newCombustivel.idbombas ||\r\n      !this.newCombustivel.preco ||\r\n      !this.newCombustivel.tipoproduto\r\n    ) {\r\n      await this.utilService.showAlert('Erro', 'Todos os campos são obrigatórios.');\r\n      return;\r\n    }\r\n\r\n    // Validação de idbicos e idbombas para aceitar apenas números e vírgulas, e remover vírgulas no início ou no fim\r\n    this.newCombustivel.idbicos = this.newCombustivel.idbicos.replace(/(^,)|(,$)/g, '');\r\n    this.newCombustivel.idbombas = this.newCombustivel.idbombas.replace(/(^,)|(,$)/g, '');\r\n\r\n    const idbicosRegex = /^(\\d+)(,\\d+)*$/;\r\n    const idbombasRegex = /^(\\d+)(,\\d+)*$/;\r\n    const precoRegex = /^\\d+([.,]\\d{1,2})?$/;\r\n\r\n    // Validação Bico\r\n    if (!idbicosRegex.test(this.newCombustivel.idbicos)) {\r\n      await this.utilService.showAlert('Erro', 'O campo Bicos deve conter apenas números e vírgulas.');\r\n      return;\r\n    }\r\n\r\n    // Validação campo Bomba\r\n    if (!idbombasRegex.test(this.newCombustivel.idbombas)) {\r\n      await this.utilService.showAlert('Erro', 'O campo Bombas deve conter apenas números e vírgulas.');\r\n      return;\r\n    }\r\n\r\n    // Validação preço\r\n    if (!precoRegex.test(this.newCombustivel.preco.toString())) {\r\n      await this.utilService.showAlert('Erro', 'O campo Preço deve conter apenas números e ponto, com no máximo 2 casas decimais.');\r\n      return;\r\n    }\r\n\r\n    //Restringe atualizar Código do combustível\r\n    const combustivelCarregado = this.combustivelDataService.getCombustivel();\r\n    if (combustivelCarregado?.id != undefined && combustivelCarregado?.id != this.newCombustivel.id) {\r\n      await this.utilService.showAlert('Erro', 'Não é permitido atualizar o código do combustível.');\r\n      return;\r\n    }\r\n\r\n    //Valida Combustivel duplicado\r\n    const combustivelJaExiste = await this.combustivelService.getCombustivelById(this.newCombustivel.id);\r\n    if (combustivelJaExiste && combustivelCarregado?.id > 0) {\r\n      await this.utilService.showAlert('Erro', `O combustível ${combustivelJaExiste.id} já foi cadastrado.`);\r\n      return;\r\n    }\r\n\r\n    // Verificar se a bomba informada existe e se o bico informado existe, vinculado a uma bomba\r\n    if (!(await this.validaSeBombasEBicosExistem())) {\r\n      return;\r\n    }\r\n\r\n    // Verificação de duplicidade de bicos\r\n    const combustivelBicoJaCadastrado = await this.bicoJaExisteNoCombustivel();\r\n    this.combustiveisDiferentes = false;\r\n\r\n    if (combustivelBicoJaCadastrado != undefined) {\r\n      this.combustiveisDiferentes = combustivelBicoJaCadastrado.id != this.newCombustivel.id; //Verifica não está localizando ele mesmo\r\n    }\r\n\r\n    if (combustivelBicoJaCadastrado && this.combustiveisDiferentes) {\r\n      const bicoDuplicado = await this.retornaBicoDuplicado(combustivelBicoJaCadastrado);\r\n      await this.utilService.showAlert(\r\n        'Erro',\r\n        `O bico ${bicoDuplicado} já está cadastrado no combustível: ${combustivelBicoJaCadastrado.id} - ${combustivelBicoJaCadastrado.nome}.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    //Se o usuário estiva atualizando o número de ID do combustível e deleta antes de adicionar.\r\n    if (combustivelBicoJaCadastrado) {\r\n      console.log(`Combustível deletado: ${combustivelBicoJaCadastrado.id}`);\r\n      this.combustivelService.deleteCombustivel(combustivelBicoJaCadastrado.id);\r\n    }\r\n\r\n    let message = '';\r\n    if (this.newCombustivel.id != 0 && combustivelJaExiste == undefined) {\r\n      const id = await this.combustivelService.addCombustivel(\r\n        this.newCombustivel.id,\r\n        this.newCombustivel.nome,\r\n        this.newCombustivel.idbicos,\r\n        this.newCombustivel.idbombas,\r\n        this.newCombustivel.preco,\r\n        this.newCombustivel.tipoproduto, \r\n        this.newCombustivel.status, \r\n        this.newCombustivel.ehcombustivel, \r\n        this.newCombustivel.ncm, \r\n        this.newCombustivel.anp, \r\n        this.newCombustivel.codigobarras\r\n        );\r\n      this.newCombustivel.id = id;\r\n      message = `Combustível ${id} - ${this.newCombustivel.nome} adicionado com sucesso!`;\r\n    } else {\r\n      await this.combustivelService.updateCombustivel(\r\n        this.newCombustivel.id,\r\n        this.newCombustivel.nome,\r\n        this.newCombustivel.idbicos,\r\n        this.newCombustivel.idbombas,\r\n        this.newCombustivel.preco,\r\n        this.newCombustivel.tipoproduto, \r\n        this.newCombustivel.status, \r\n        this.newCombustivel.ehcombustivel, \r\n        this.newCombustivel.ncm, \r\n        this.newCombustivel.anp, \r\n        this.newCombustivel.codigobarras\r\n        );\r\n      message = `Combustível ${this.newCombustivel.id} - ${this.newCombustivel.nome} atualizado com sucesso!`;\r\n    }\r\n\r\n    await this.sincronizarCombustivel();\r\n\r\n    // Exibir alerta de sucesso\r\n    const alert = await this.alertController.create({\r\n      header: 'Sucesso',\r\n      message: message,\r\n      buttons: [\r\n        {\r\n          text: 'OK',\r\n          handler: () => {\r\n            // Redirecionar para a página combustivel após clicar em OK\r\n            this.router.navigate(['/combustivel']);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async retornaBicoDuplicado(combustivel: Combustivel): Promise<string> {\r\n    const bicosUsuario = this.newCombustivel.idbicos.split(',').map((bico) => bico.trim());\r\n    const combustivelBicosArray = combustivel.idbicos.split(',').map((bico) => bico.trim());\r\n\r\n    for (const bico of bicosUsuario) {\r\n      if (combustivelBicosArray.includes(bico)) {\r\n        return bico;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  async bicoJaExisteNoCombustivel(): Promise<Combustivel | null> {\r\n    const bicosUsuario = this.newCombustivel.idbicos.split(',').map((bico) => bico.trim());\r\n    const combustiveis = await this.combustivelService.getAllCombustiveis();\r\n\r\n    for (const combustivel of combustiveis) {\r\n      const combustivelBicosArray = combustivel.idbicos.split(',').map((bico) => bico.trim());\r\n      for (const userBico of bicosUsuario) {\r\n        if (combustivelBicosArray.includes(userBico) && this.newCombustivel.id != combustivel.id) {\r\n          return combustivel;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  voltarPagina() {\r\n    this.router.navigate(['/combustivel']);\r\n  }\r\n\r\n  async validaSeBombasEBicosExistem(): Promise<boolean> {\r\n    const bombas = await this.bombaService.getAllBombas();\r\n    const bombasInput = this.newCombustivel.idbombas.split(',').map(Number);\r\n    const bicosInput = this.newCombustivel.idbicos.split(',').map(Number);\r\n\r\n    // Validação de Bombas\r\n    for (const bombaInput of bombasInput) {\r\n      let bombaExiste = false;\r\n      for (const bomba of bombas) {\r\n        if (Number(bomba.idbomba) === bombaInput) {\r\n          bombaExiste = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!bombaExiste) {\r\n        await this.utilService.showAlert('Erro de Validação', `A bomba ${bombaInput} não existe.`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Validação de Bicos\r\n    const bicosArray: number[] = [];\r\n    bombas.forEach(bomba => {\r\n      bomba.idbicos.split(',').map(Number).forEach(bico => {\r\n        if (!bicosArray.includes(bico)) {\r\n          bicosArray.push(bico);\r\n        }\r\n      });\r\n    });\r\n\r\n    for (const bicoInput of bicosInput) {\r\n      if (!bicosArray.includes(bicoInput)) {\r\n        await this.utilService.showAlert('Erro de Validação', `O bico ${bicoInput} não está vinculado a nenhuma bomba.`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  async retornaStatusString(status:boolean): Promise<string>{\r\n    if (status){\r\n      return 'ATIVO';\r\n    }else{\r\n      return 'INATIVO';\r\n    }\r\n  }\r\n  \r\n  async sincronizarCombustivel(){\r\n    const statusString = await this.retornaStatusString(this.newCombustivel.status);\r\n\r\n    const corpo: sincronizarProdutoSingleRequest = {\r\n      codigoProduto: this.newCombustivel.id.toString(),\r\n      Descricao: this.newCombustivel.nome,\r\n      tipoProduto: this.newCombustivel.tipoproduto,\r\n      status: statusString,\r\n      preco: this.utilService.verificarEConverterPreco(this.newCombustivel.preco),\r\n      ehCombustivel: this.newCombustivel.ehcombustivel,\r\n      ncm : this.newCombustivel.ncm.toString(),\r\n      anp: this.newCombustivel.anp.toString(),\r\n      codigoBarras: this.newCombustivel.codigobarras.toString(),\r\n    }; \r\n\r\n    try {\r\n      const cupom = await this.produtoService.sincronizarProdutoSingle(corpo);\r\n      \r\n      console.log(`${JSON.stringify(corpo)}`);\r\n      console.log(`TraceID: ${cupom.trace_Id}`);\r\n      console.log(`statusCode: ${cupom.statusCode}`);\r\n\r\n      if (cupom.statusCode = 200){\r\n        return true;\r\n      }else{\r\n        await this.utilService.showAlert('Erro', `Não foi possível sincronizar o combustível: ${cupom.errmsg}`);\r\n        return false;\r\n      }   \r\n    } catch (error) {\r\n      console.error('Erro ao sincronizar combustível:', error);\r\n\r\n      // Extraia a mensagem de erro correta do objeto error\r\n      let errorMsg = 'Erro desconhecido';\r\n      if (error instanceof HttpErrorResponse) {\r\n        if (error.error && typeof error.error === 'object' && 'errmsg' in error.error) {\r\n          errorMsg = error.error.errmsg;\r\n        } else if (error.message) {\r\n          errorMsg = error.message;\r\n        }\r\n      }\r\n\r\n      await this.utilService.showAlert('Erro', `Não foi possível sincronizar o combustível: ${errorMsg}`);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CadcombustivelPageRoutingModule } from './cadcombustivel-routing.module';\n\nimport { CadcombustivelPage } from './cadcombustivel.page';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, CadcombustivelPageRoutingModule],\n  declarations: [CadcombustivelPage]\n})\nexport class CadcombustivelPageModule {}\n"],"x_google_ignoreList":[]}