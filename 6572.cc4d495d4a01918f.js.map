{"version":3,"file":"6572.cc4d495d4a01918f.js","mappings":"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","names":["ExportarDatabaseFrontendService","_ExportarDatabaseFrontendService","constructor","http","configuracaoService","this","ExportarDatabaseFrontend","jsondb","_this","_asyncToGenerator","endpoint","getConfiguracaoUrlApi","headers","HttpHeaders","cupomObservable","post","firstValueFrom","i0","i1","i2","factory","ɵfac","providedIn","DatabaseUtilsService","_DatabaseUtilsService","databaseService","exportarDatabaseFrontendService","exportDatabaseToJSON","data","combustiveis","toArray","bombas","descontos","descontoscombustiveis","descontotipospagamento","configuracao","map","config","login","loginsagaz","senha","senhasagaz","json","JSON","stringify","filename","Blob","type","Date","toISOString","replace","console","log","corpo","JSONdb","arquivoGerado","error","importDatabaseFromJSON","jsonData","importCombustiveis","importBombas","_this2","parse","clear","combustivel","addCombustivel","id","nome","idbicos","idbombas","parseFloat","preco","tipoproduto","status","ehcombustivel","ncm","toString","anp","codigobarras","bomba","addBomba","idbomba","newDescontoIds","desconto","where","equals","idpedidodidiglobal","first","newId","addDesconto","totalpreco","totaldesconto","datahora","numerorecibo","codigodesconto","confirmado","totaldescontorecebido","cancelado","nomeatendente","descontoCombustivel","newDescontoId","iddesconto","undefined","addDescontoCombustivel","idcombustivel","parseInt","idbico","totallitros","totalprecocombustivel","totaldescontocombustivel","totaldescontorecebidocombustivel","descontoTipoPagamento","addDescontoTiposPagamento","tipopagamento","valorpago","atualizaConfiguracaoParcial","urlapi","diretoriojson","importCombustivelFromJSON","_this3","includes","TiposProduto","Error","getCombustivelById","Codigo","deleteCombustivel","Nome","Bico","Bomba","Preco","NCM","ANP","CodigoBarras","bombasIds","split","b","trim","bicosIds","getBombaById","bicosExistentes","bico","push","updateBomba","join","DatabaseToJSONService","_DatabaseToJSONService","dbUtilService","retornaJSON","$event","_r1","ctx_r1","username","password","togglePassword","passwordType","_r3","newConfiguracao","atualizarConfiguracoes","passwordConfirm","atualizarSenha","exportDatabase","importDatabase","resetDatabase","logout","passwordTypeNew","passwordTypeConfirm","routes","path","component","_ConfiguracaoPage","ConfiguracaoPage","alertController","utilService","router","databaseToJSONService","isAuthenticated","importDB","ngOnInit","isAuth","localStorage","getItem","realizaConfiguracaoInicial","ionViewWillLeave","ngOnDestroy","loadConfiguracoes","getConfiguracaoById","msgRetorno","configuracaoInicial","showAlert","deleteConfiguracao","autenticar","setItem","_this4","salvarConfiguracao","then","catch","_ref2","_x","apply","arguments","_this5","_ref4","_x2","_this6","salvaConfiguracao","_this7","field","_this8","create","header","message","buttons","text","role","cssClass","handler","present","_this9","removeItem","window","location","reload","navigate","_this10","_this11","perguntaImportarDB","_this12","Promise","_ref5","resolve","_ref6","perguntaImportaTabela","_x3","NomeTabela","_this13","_ref7","pronome","_x4","i3","i4","i5","selectors","decls","vars","consts","template","rf","ctx","ConfiguracaoPage_div_7_Template","ConfiguracaoPage_ng_template_8_Template","configContent_r4","ConfiguracaoPageRoutingModule","_ConfiguracaoPageRoutingModule","RouterModule","forChild","ConfiguracaoPageModule","_ConfiguracaoPageModule","CommonModule","FormsModule","IonicModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/core/services/ExportarDatabaseFrontend.service.ts","./src/app/services/database-utils.service.ts","./src/app/services/DatabaseToJSON/database-to-json.service.ts","./src/app/pages/configuracao/configuracao.page.html","./src/app/pages/configuracao/configuracao-routing.module.ts","./src/app/pages/configuracao/configuracao.page.ts","./src/app/pages/configuracao/configuracao.module.ts"],"sourcesContent":["// src\\app\\core\\services\\ExportarDatabaseFrontend.service.ts\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { ExportarDatabaseFrontendRequest } from 'src/app/shared/models/exportarDatabaseFrontendRequest';\r\nimport { exportarDatabaseFrontendResponse } from 'src/app/shared/models/exportarDatabaseFrontendResponse';\r\nimport { ConfiguracaoService } from 'src/app/services/configuracao/configuracao.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportarDatabaseFrontendService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private configuracaoService: ConfiguracaoService) {}\r\n\r\n  async ExportarDatabaseFrontend(jsondb: ExportarDatabaseFrontendRequest): Promise<exportarDatabaseFrontendResponse> {\r\n    const apiUrl = await this.configuracaoService.getConfiguracaoUrlApi();\r\n    const endpoint = apiUrl + 'ExportarDatabaseFrontend';\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    const cupomObservable = this.http.post<exportarDatabaseFrontendResponse>(endpoint, jsondb, { headers });\r\n    return await firstValueFrom(cupomObservable);\r\n  }\r\n}\r\n","// src\\app\\services\\database-utils.service.ts\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { DatabaseService } from './database.service';\r\nimport { ExportarDatabaseFrontendService } from '../core/services/ExportarDatabaseFrontend.service';\r\nimport { ExportarDatabaseFrontendRequest } from '../shared/models/exportarDatabaseFrontendRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatabaseUtilsService {\r\n\r\n  constructor(\r\n    private databaseService: DatabaseService,\r\n    private exportarDatabaseFrontendService: ExportarDatabaseFrontendService,\r\n  ) {}\r\n\r\n  //#region Exportar Banco de dados do JSON\r\n  async exportDatabaseToJSON(): Promise<boolean> {\r\n    try {\r\n      const data = {\r\n        combustiveis: await this.databaseService.combustiveis.toArray(),\r\n        bombas: await this.databaseService.bombas.toArray(),\r\n        descontos: await this.databaseService.descontos.toArray(),\r\n        descontoscombustiveis: await this.databaseService.descontoscombustiveis.toArray(),\r\n        descontotipospagamento: await this.databaseService.descontotipospagamento.toArray(),\r\n        configuracao: (await this.databaseService.configuracao.toArray()).map(config => ({\r\n          ...config,\r\n          login: '',\r\n          loginsagaz: '',\r\n          senha: '',\r\n          senhasagaz: ''\r\n        }))\r\n      };\r\n\r\n      const json = JSON.stringify(data, null, 2);\r\n      const blob = new Blob([json], { type: 'application/json' });\r\n      const timestamp = new Date().toISOString().replace(/[:.-]/g, '');\r\n      const filename = `GoodsoftDBapp99taxi${timestamp}.json`;     \r\n      \r\n      console.log(`${JSON.stringify(data)}`);\r\n      console.log(`${filename}`);\r\n      console.log(`${json}`);\r\n\r\n      const corpo: ExportarDatabaseFrontendRequest = {\r\n        JSONdb : json\r\n      }\r\n\r\n      try {\r\n        const retornoGerouArquivo = await this.exportarDatabaseFrontendService.ExportarDatabaseFrontend(corpo);\r\n  \r\n        if(!retornoGerouArquivo.arquivoGerado){\r\n          return false;\r\n        }\r\n  \r\n        return true;\r\n      } catch (error) {\r\n        console.error('Erro ao enviar JSON para API:', error);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao exportar o banco de dados para JSON:', error);\r\n    }\r\n\r\n    return false;\r\n  }  \r\n  //#endregion  \r\n\r\n  //#region Importar Banco de dados do JSON\r\n  async importDatabaseFromJSON(jsonData: string, importCombustiveis: boolean, importBombas: boolean): Promise<boolean> {\r\n    try {\r\n      // Parse JSON\r\n      const data = JSON.parse(jsonData);\r\n\r\n      // Importar combustiveis se o usuário escolher\r\n      if (importCombustiveis) {\r\n        await this.databaseService.combustiveis.clear();\r\n        for (const combustivel of data.combustiveis) {\r\n          await this.databaseService.addCombustivel(\r\n            combustivel.id,\r\n            combustivel.nome,\r\n            combustivel.idbicos,\r\n            combustivel.idbombas,\r\n            parseFloat(combustivel.preco), // Converter string para número\r\n            combustivel.tipoproduto,\r\n            combustivel.status,\r\n            combustivel.ehcombustivel,\r\n            combustivel.ncm.toString(), // Converter para string se necessário\r\n            combustivel.anp.toString(), // Converter para string se necessário\r\n            combustivel.codigobarras.toString() // Converter para string se necessário\r\n          );\r\n        }\r\n      }\r\n\r\n      // Importar bombas se o usuário escolher\r\n      if (importBombas) {\r\n        await this.databaseService.bombas.clear();\r\n        for (const bomba of data.bombas) {\r\n          await this.databaseService.addBomba(bomba.idbomba, bomba.idbicos);\r\n        }\r\n      }\r\n\r\n      // Importar descontos\r\n      const newDescontoIds: Record<number, number> = {}; // Para mapear ids antigos para novos\r\n      for (const desconto of data.descontos) {\r\n        const existingDesconto = await this.databaseService.descontos\r\n          .where('idpedidodidiglobal')\r\n          .equals(desconto.idpedidodidiglobal)\r\n          .first();\r\n\r\n        if (!existingDesconto) {\r\n          // Adicionar novo desconto e armazenar novo id\r\n          const newId = await this.databaseService.addDesconto(\r\n            desconto.totalpreco,\r\n            desconto.totaldesconto,\r\n            new Date(desconto.datahora),\r\n            desconto.numerorecibo,\r\n            desconto.idpedidodidiglobal,\r\n            desconto.codigodesconto,\r\n            desconto.confirmado,\r\n            desconto.totaldescontorecebido,\r\n            desconto.cancelado,\r\n            desconto.nomeatendente\r\n          );\r\n\r\n          newDescontoIds[desconto.id] = newId;\r\n        }\r\n      }\r\n\r\n      // Importar descontoscombustiveis usando os novos ids de desconto\r\n      for (const descontoCombustivel of data.descontoscombustiveis) {\r\n        const newDescontoId = newDescontoIds[descontoCombustivel.iddesconto];\r\n        if (newDescontoId !== undefined) {\r\n          await this.databaseService.addDescontoCombustivel(\r\n            newDescontoId,\r\n            descontoCombustivel.idcombustivel,\r\n            descontoCombustivel.idbomba,\r\n            parseInt(descontoCombustivel.idbico), // Converter string para número se necessário\r\n            descontoCombustivel.nome,\r\n            descontoCombustivel.preco,\r\n            descontoCombustivel.totallitros,\r\n            descontoCombustivel.totalprecocombustivel,\r\n            descontoCombustivel.totaldescontocombustivel,\r\n            descontoCombustivel.totaldescontorecebidocombustivel\r\n          );\r\n        }\r\n      }\r\n\r\n      // Importar descontotipospagamento usando os novos ids de desconto\r\n      for (const descontoTipoPagamento of data.descontotipospagamento) {\r\n        const newDescontoId = newDescontoIds[descontoTipoPagamento.iddesconto];\r\n        if (newDescontoId !== undefined) {\r\n          await this.databaseService.addDescontoTiposPagamento(\r\n            newDescontoId,\r\n            descontoTipoPagamento.tipopagamento,\r\n            descontoTipoPagamento.valorpago\r\n          );\r\n        }\r\n      }\r\n\r\n      // Atualizar configuracao se necessário\r\n      for (const config of data.configuracao) {\r\n        await this.databaseService.atualizaConfiguracaoParcial(config.id, config.urlapi, config.diretoriojson);\r\n      }\r\n\r\n      return true; // Importação concluída com sucesso\r\n    } catch (error) {\r\n      console.error('Erro ao importar o banco de dados do JSON:', error);\r\n      return false;\r\n    }\r\n  }\r\n  //#endregion  \r\n\r\n  //#region Importar/Atualizar Combustível do JSON\r\n  async importCombustivelFromJSON(jsonData: string): Promise<boolean> {\r\n    try {\r\n      // Parse do JSON\r\n      const data = JSON.parse(jsonData);\r\n\r\n      // Verificar se o campo TiposProduto é válido\r\n      const tiposPermitidos = ['ETANOL', 'ETANOL_ADITIVADO', 'GASOLINA', 'GASOLINA_ADITIVADA', 'DIESEL', 'DIESEL_S500_ADITIVADO', 'DIESEL_ADITIVADO', 'DIESEL_S10_ADITIVADO', 'GASOLINA_PODIUM', 'GASOLINA_PREMIUM', 'GNV', 'ARLA32', 'QUEROSENE', 'GASOLINA_TROCA_OLEO', 'PONTUACAO', 'OUTRO'];\r\n\r\n      if (!tiposPermitidos.includes(data.TiposProduto)) {\r\n        throw new Error(`Tipo de Produto inválido: ${data.TiposProduto}`);\r\n      }\r\n\r\n      // Verificar se o combustível já existe\r\n      const combustivelExistente = await this.databaseService.getCombustivelById(data.Codigo);\r\n\r\n      if (combustivelExistente) {\r\n        // Deletar combustível existente\r\n        await this.databaseService.deleteCombustivel(data.Codigo);\r\n      }\r\n\r\n      // Cadastrar novo combustível\r\n      await this.databaseService.addCombustivel(\r\n        data.Codigo,\r\n        data.Nome,\r\n        data.Bico.toString(),\r\n        data.Bomba.toString(),\r\n        data.Preco,\r\n        data.TiposProduto,\r\n        true, // status\r\n        true, // ehcombustivel\r\n        data.NCM,\r\n        data.ANP,\r\n        data.CodigoBarras\r\n      );\r\n\r\n      // Verificar e atualizar as bombas e bicos\r\n      const bombasIds = data.Bomba.toString().split(',').map((b: string) => b.trim());\r\n      const bicosIds = data.Bico.toString().split(',').map((b: string) => b.trim());\r\n\r\n      for (const idbomba of bombasIds) {\r\n        const bomba = await this.databaseService.getBombaById(parseInt(idbomba));\r\n\r\n        if (bomba) {\r\n          // Bomba já existe, verificar bicos\r\n          let bicosExistentes = bomba.idbicos.split(',').map((b) => b.trim());\r\n          for (const bico of bicosIds) {\r\n            if (!bicosExistentes.includes(bico)) {\r\n              bicosExistentes.push(bico);\r\n            }\r\n          }\r\n          // Atualizar bomba com os novos bicos\r\n          await this.databaseService.updateBomba(parseInt(idbomba), bicosExistentes.join(','));\r\n        } else {\r\n          // Se a bomba não existir, adiciona nova bomba com os bicos\r\n          await this.databaseService.addBomba(parseInt(idbomba), bicosIds.join(','));\r\n        }\r\n      }\r\n\r\n      return true; // Importação concluída com sucesso\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao importar o combustível do JSON:', error);\r\n      return false;\r\n    }\r\n  }  \r\n  //#endregion\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DatabaseUtilsService } from '../database-utils.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatabaseToJSONService {\r\n\r\n  constructor(private dbUtilService: DatabaseUtilsService) { }\r\n\r\n  async exportDatabaseToJSON(): Promise<boolean> {\r\n    return await this.dbUtilService.exportDatabaseToJSON();\r\n  }\r\n\r\n  async importDatabaseFromJSON(jsonData: string, importCombustiveis: boolean, importBombas: boolean): Promise<boolean> {\r\n    return await this.dbUtilService.importDatabaseFromJSON(jsonData, importCombustiveis, importBombas);\r\n  }\r\n\r\n  // Homologação do método importDatabaseFromJSON\r\n  async retornaJSON(): Promise<string>{\r\n    const jsonString = `{\r\n      \"combustiveis\": [\r\n        {\r\n          \"id\": 1,\r\n          \"nome\": \"GASOLINA\",\r\n          \"idbicos\": \"10,12\",\r\n          \"idbombas\": \"1\",\r\n          \"preco\": \"5.99\",\r\n          \"tipoproduto\": \"GASOLINA\",\r\n          \"status\": true,\r\n          \"ehcombustivel\": true,\r\n          \"ncm\": 12345,\r\n          \"anp\": 12345,\r\n          \"codigobarras\": 123154\r\n        },\r\n        {\r\n          \"id\": 2,\r\n          \"nome\": \"ETANOL\",\r\n          \"idbicos\": \"1\",\r\n          \"idbombas\": \"2\",\r\n          \"preco\": \"4.7851\",\r\n          \"tipoproduto\": \"ETANOL\",\r\n          \"status\": true,\r\n          \"ehcombustivel\": true,\r\n          \"ncm\": 1234,\r\n          \"anp\": 1234,\r\n          \"codigobarras\": 1234\r\n        },\r\n        {\r\n          \"id\": 3,\r\n          \"nome\": \"GASOLINA PODIUM\",\r\n          \"idbicos\": \"2\",\r\n          \"idbombas\": \"2\",\r\n          \"preco\": \"8.5127\",\r\n          \"tipoproduto\": \"GASOLINA_PODIUM\",\r\n          \"status\": true,\r\n          \"ehcombustivel\": true,\r\n          \"ncm\": 12345,\r\n          \"anp\": 12345,\r\n          \"codigobarras\": 12345\r\n        },\r\n        {\r\n          \"id\": 4,\r\n          \"nome\": \"GASOLINA PREMIUM\",\r\n          \"idbicos\": \"3\",\r\n          \"idbombas\": \"3\",\r\n          \"preco\": \"8.00\",\r\n          \"tipoproduto\": \"GASOLINA_PREMIUM\",\r\n          \"status\": true,\r\n          \"ehcombustivel\": true,\r\n          \"ncm\": 1234,\r\n          \"anp\": 12354,\r\n          \"codigobarras\": 12345\r\n        }\r\n      ],\r\n      \"bombas\": [\r\n        {\r\n          \"idbomba\": 1,\r\n          \"idbicos\": \"10,12\"\r\n        },\r\n        {\r\n          \"idbomba\": 2,\r\n          \"idbicos\": \"1,2\"\r\n        },\r\n        {\r\n          \"idbomba\": 3,\r\n          \"idbicos\": \"3\"\r\n        }\r\n      ],\r\n      \"descontos\": [\r\n        {\r\n          \"totalpreco\": 23.95,\r\n          \"totaldesconto\": 23.95,\r\n          \"datahora\": \"2024-08-01T00:02:48.521Z\",\r\n          \"numerorecibo\": \"123\",\r\n          \"idpedidodidiglobal\": \"13e70bf0-0cfa-93cf-957e-590afd1b9899\",\r\n          \"codigodesconto\": \"9MCN8\",\r\n          \"confirmado\": false,\r\n          \"totaldescontorecebido\": 0,\r\n          \"cancelado\": false,\r\n          \"nomeatendente\": \"Roberta Cristina\",\r\n          \"id\": 1\r\n        },\r\n        {\r\n          \"totalpreco\": 124.47,\r\n          \"totaldesconto\": 114.08,\r\n          \"datahora\": \"2024-08-06T22:02:18.317Z\",\r\n          \"numerorecibo\": \"7897\",\r\n          \"idpedidodidiglobal\": \"e870bba5-9029-9b0c-af15-a7c469915b21\",\r\n          \"codigodesconto\": \"9MCN8\",\r\n          \"confirmado\": false,\r\n          \"totaldescontorecebido\": 0,\r\n          \"cancelado\": false,\r\n          \"nomeatendente\": \"RONALD SOUZA\",\r\n          \"id\": 2\r\n        },\r\n        {\r\n          \"totalpreco\": 101.13,\r\n          \"totaldesconto\": 93.74,\r\n          \"datahora\": \"2024-08-06T22:27:58.025Z\",\r\n          \"numerorecibo\": \"79815\",\r\n          \"idpedidodidiglobal\": \"2632c3ac-76b8-99de-9efb-3d153c2d3564\",\r\n          \"codigodesconto\": \"9MCN8\",\r\n          \"confirmado\": true,\r\n          \"totaldescontorecebido\": 0,\r\n          \"cancelado\": false,\r\n          \"nomeatendente\": \"ANDRÉ DANTAS\",\r\n          \"id\": 3\r\n        },\r\n        {\r\n          \"totalpreco\": 299.5,\r\n          \"totaldesconto\": 279.5,\r\n          \"datahora\": \"2024-08-06T23:02:54.606Z\",\r\n          \"numerorecibo\": \"789456\",\r\n          \"idpedidodidiglobal\": \"7f31542e-b228-9829-b8fc-9c69255f78fe\",\r\n          \"codigodesconto\": \"9MCN8\",\r\n          \"confirmado\": true,\r\n          \"totaldescontorecebido\": 20,\r\n          \"cancelado\": true,\r\n          \"nomeatendente\": \"Ricardo Silva\",\r\n          \"id\": 4\r\n        },\r\n        {\r\n          \"totalpreco\": 80,\r\n          \"totaldesconto\": 75,\r\n          \"datahora\": \"2024-08-06T23:17:30.308Z\",\r\n          \"numerorecibo\": \"12345\",\r\n          \"idpedidodidiglobal\": \"1bf1352b-ecf6-9bbd-a81f-6ce4f382c3a5\",\r\n          \"codigodesconto\": \"9MCN8\",\r\n          \"confirmado\": true,\r\n          \"totaldescontorecebido\": 0,\r\n          \"cancelado\": false,\r\n          \"nomeatendente\": \"Ricardo Silva\",\r\n          \"id\": 5\r\n        },\r\n        {\r\n          \"totalpreco\": 160,\r\n          \"totaldesconto\": 150,\r\n          \"datahora\": \"2024-08-06T23:55:51.230Z\",\r\n          \"numerorecibo\": \"12367\",\r\n          \"idpedidodidiglobal\": \"081d0980-5dd8-990d-a4ed-ba59560e2053\",\r\n          \"codigodesconto\": \"9MCN8\",\r\n          \"confirmado\": true,\r\n          \"totaldescontorecebido\": 0,\r\n          \"cancelado\": false,\r\n          \"nomeatendente\": \"RONALDINHO GAUCHO\",\r\n          \"id\": 6\r\n        }\r\n      ],\r\n      \"descontoscombustiveis\": [\r\n        {\r\n          \"iddesconto\": 1,\r\n          \"idcombustivel\": 2,\r\n          \"idbomba\": 2,\r\n          \"idbico\": \"1\",\r\n          \"nome\": \"ETANOL\",\r\n          \"preco\": 4.79,\r\n          \"totallitros\": 5,\r\n          \"totalprecocombustivel\": 23.95,\r\n          \"totaldescontocombustivel\": 23.95,\r\n          \"totaldescontorecebidocombustivel\": 0,\r\n          \"id\": 1\r\n        },\r\n        {\r\n          \"iddesconto\": 2,\r\n          \"idcombustivel\": 1,\r\n          \"idbomba\": 1,\r\n          \"idbico\": \"12\",\r\n          \"nome\": \"GASOLINA\",\r\n          \"preco\": 5.99,\r\n          \"totallitros\": 20.78,\r\n          \"totalprecocombustivel\": 124.47,\r\n          \"totaldescontocombustivel\": 114.08,\r\n          \"totaldescontorecebidocombustivel\": 10.39,\r\n          \"id\": 2\r\n        },\r\n        {\r\n          \"iddesconto\": 3,\r\n          \"idcombustivel\": 3,\r\n          \"idbomba\": 2,\r\n          \"idbico\": \"2\",\r\n          \"nome\": \"GASOLINA PODIUM\",\r\n          \"preco\": 8.51,\r\n          \"totallitros\": 5,\r\n          \"totalprecocombustivel\": 42.55,\r\n          \"totaldescontocombustivel\": 40.05,\r\n          \"totaldescontorecebidocombustivel\": 2.5,\r\n          \"id\": 3\r\n        },\r\n        {\r\n          \"iddesconto\": 3,\r\n          \"idcombustivel\": 1,\r\n          \"idbomba\": 1,\r\n          \"idbico\": \"10\",\r\n          \"nome\": \"GASOLINA\",\r\n          \"preco\": 5.99,\r\n          \"totallitros\": 9.78,\r\n          \"totalprecocombustivel\": 58.58,\r\n          \"totaldescontocombustivel\": 53.69,\r\n          \"totaldescontorecebidocombustivel\": 4.89,\r\n          \"id\": 4\r\n        },\r\n        {\r\n          \"iddesconto\": 4,\r\n          \"idcombustivel\": 1,\r\n          \"idbomba\": 1,\r\n          \"idbico\": \"12\",\r\n          \"nome\": \"GASOLINA\",\r\n          \"preco\": 5.99,\r\n          \"totallitros\": 50,\r\n          \"totalprecocombustivel\": 299.5,\r\n          \"totaldescontocombustivel\": 279.5,\r\n          \"totaldescontorecebidocombustivel\": 20,\r\n          \"id\": 5\r\n        },\r\n        {\r\n          \"iddesconto\": 5,\r\n          \"idcombustivel\": 4,\r\n          \"idbomba\": 3,\r\n          \"idbico\": \"3\",\r\n          \"nome\": \"GASOLINA PREMIUM\",\r\n          \"preco\": 8,\r\n          \"totallitros\": 10,\r\n          \"totalprecocombustivel\": 80,\r\n          \"totaldescontocombustivel\": 75,\r\n          \"totaldescontorecebidocombustivel\": 5,\r\n          \"id\": 6\r\n        },\r\n        {\r\n          \"iddesconto\": 6,\r\n          \"idcombustivel\": 4,\r\n          \"idbomba\": 3,\r\n          \"idbico\": \"3\",\r\n          \"nome\": \"GASOLINA PREMIUM\",\r\n          \"preco\": 8,\r\n          \"totallitros\": 20,\r\n          \"totalprecocombustivel\": 160,\r\n          \"totaldescontocombustivel\": 150,\r\n          \"totaldescontorecebidocombustivel\": 10,\r\n          \"id\": 7\r\n        }\r\n      ],\r\n      \"descontotipospagamento\": [\r\n        {\r\n          \"iddesconto\": 3,\r\n          \"tipopagamento\": \"Dinheiro\",\r\n          \"valorpago\": 93.74,\r\n          \"id\": 1\r\n        },\r\n        {\r\n          \"iddesconto\": 4,\r\n          \"tipopagamento\": \"Dinheiro\",\r\n          \"valorpago\": 279.5,\r\n          \"id\": 2\r\n        },\r\n        {\r\n          \"iddesconto\": 5,\r\n          \"tipopagamento\": \"Pix\",\r\n          \"valorpago\": 75,\r\n          \"id\": 3\r\n        },\r\n        {\r\n          \"iddesconto\": 6,\r\n          \"tipopagamento\": \"Pix\",\r\n          \"valorpago\": 100,\r\n          \"id\": 4\r\n        },\r\n        {\r\n          \"iddesconto\": 6,\r\n          \"tipopagamento\": \"Dinheiro\",\r\n          \"valorpago\": 50,\r\n          \"id\": 5\r\n        }\r\n      ],\r\n      \"configuracao\": [\r\n        {\r\n          \"id\": 1,\r\n          \"login\": \"\",\r\n          \"senha\": \"\",\r\n          \"urlapi\": \"http://localhost:5000/api/GasStation/\",\r\n          \"loginsagaz\": \"\",\r\n          \"senhasagaz\": \"\",\r\n          \"diretoriojson\": \"\"\r\n        }\r\n      ]\r\n    }`;\r\n\r\n    return jsonString;\r\n  }\r\n}\r\n","<!--  src\\app\\pages\\configuracao\\configuracao.page.html -->\r\n\r\n<ion-header [translucent]=\"true\">\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n    <ion-title>Configuração</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n  <div *ngIf=\"!isAuthenticated; else configContent\">\r\n    <ion-card>\r\n      <ion-card-header>\r\n        <ion-card-title>Login de Configuração</ion-card-title>\r\n      </ion-card-header>\r\n      <ion-card-content>\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Usuário</ion-label>\r\n          <ion-input [(ngModel)]=\"username\" type=\"text\"></ion-input>\r\n        </ion-item>\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Senha</ion-label>\r\n          <ion-input [(ngModel)]=\"password\" [type]=\"passwordType\" clearInput>\r\n            <ion-icon slot=\"end\" [name]=\"passwordType === 'password' ? 'eye-off' : 'eye'\" (click)=\"togglePassword('loginpassword')\"></ion-icon>\r\n          </ion-input>\r\n        </ion-item>\r\n        <ion-button expand=\"block\" (click)=\"login()\">Entrar</ion-button>\r\n      </ion-card-content>\r\n    </ion-card>\r\n  </div>\r\n  \r\n  <ng-template #configContent>\r\n    <!-- BLOCO CONFIG -->\r\n    <ion-card>\r\n      <ion-card-content>\r\n        <ion-item>\r\n          <ion-label position=\"stacked\">Login administrativo</ion-label>\r\n          <ion-input [(ngModel)]=\"newConfiguracao.login\"></ion-input>\r\n        </ion-item>\r\n        <ion-item>\r\n          <ion-label position=\"stacked\">URL da API</ion-label>\r\n          <ion-input [(ngModel)]=\"newConfiguracao.urlapi\"></ion-input>\r\n        </ion-item>      \r\n        <ion-button expand=\"block\" (click)=\"atualizarConfiguracoes()\">Salvar configurações</ion-button>\r\n      </ion-card-content>\r\n    </ion-card>\r\n    <!-- End --> \r\n\r\n    <!-- BLOCO SENHA -->\r\n    <ion-card>\r\n      <ion-card-header>\r\n        <ion-card-title>Alterar Senha</ion-card-title>\r\n      </ion-card-header>\r\n      <ion-card-content>\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Nova Senha</ion-label>\r\n          <ion-input [(ngModel)]=\"password\" [type]=\"passwordTypeNew\" clearInput>\r\n            <ion-icon slot=\"end\" [name]=\"passwordTypeNew === 'password' ? 'eye-off' : 'eye'\" (click)=\"togglePassword('new')\"></ion-icon>\r\n          </ion-input>\r\n        </ion-item>\r\n\r\n        <ion-item>\r\n          <ion-label position=\"floating\">Confirmar Nova Senha</ion-label>\r\n          <ion-input [(ngModel)]=\"passwordConfirm\" [type]=\"passwordTypeConfirm\" clearInput>\r\n            <ion-icon slot=\"end\" [name]=\"passwordTypeConfirm === 'password' ? 'eye-off' : 'eye'\" (click)=\"togglePassword('confirm')\"></ion-icon>\r\n          </ion-input>\r\n        </ion-item>\r\n\r\n        <ion-button expand=\"block\" (click)=\"atualizarSenha()\">Alterar Senha</ion-button>\r\n      </ion-card-content>\r\n    </ion-card>   \r\n    <!-- End --> \r\n\r\n    <!-- BLOCO Banco de Dados -->\r\n    <ion-card>\r\n      <ion-card-header>\r\n        <ion-card-title>Banco de Dados</ion-card-title>\r\n      </ion-card-header>\r\n      <ion-card-content> \r\n        <ion-button expand=\"block\" (click)=\"exportDatabase()\">Exportar Banco de Dados</ion-button>\r\n        <ion-button expand=\"block\" (click)=\"importDatabase()\">Importar Banco de Dados</ion-button>\r\n        <ion-button expand=\"block\" color=\"danger\" (click)=\"resetDatabase()\">Limpar Banco de Dados</ion-button>\r\n      </ion-card-content>\r\n    </ion-card>\r\n    <!-- End --> \r\n\r\n     <!-- Botão Sair das Configurações -->\r\n     <ion-button expand=\"block\" color=\"secondary\" (click)=\"logout()\">Sair das configurações</ion-button>\r\n  </ng-template>\r\n</ion-content>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ConfiguracaoPage } from './configuracao.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ConfiguracaoPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ConfiguracaoPageRoutingModule {}\r\n","// src\\app\\pages\\configuracao\\configuracao.page.ts\r\n\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { Configuracao } from '../../services/database.service';\r\nimport { ConfiguracaoService } from '../../services/configuracao/configuracao.service';\r\nimport { UtilService } from '../../services/util/util.service';\r\nimport { Router } from '@angular/router';\r\nimport { DatabaseToJSONService } from 'src/app/services/DatabaseToJSON/database-to-json.service';\r\n\r\n@Component({\r\n  selector: 'app-configuracao',\r\n  templateUrl: './configuracao.page.html',\r\n  styleUrls: ['./configuracao.page.scss'],\r\n})\r\nexport class ConfiguracaoPage implements OnInit {\r\n  newConfiguracao: Configuracao = {id: 1, login: '', senha: '', urlapi: '', loginsagaz: '', senhasagaz: '', diretoriojson: ''}\r\n\r\n  id: number = 1;\r\n  username: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n  passwordType: string = 'password';\r\n  passwordTypeNew: string = 'password';\r\n  passwordTypeConfirm: string = 'password';\r\n  isAuthenticated: boolean = false;\r\n\r\n  importDB: boolean = false;\r\n  importBombas: boolean = false;\r\n  importCombustiveis: boolean = false;\r\n\r\n  constructor(\r\n    private alertController: AlertController,\r\n    private configuracaoService: ConfiguracaoService,\r\n    private utilService: UtilService,\r\n    private router: Router,\r\n    private databaseToJSONService: DatabaseToJSONService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Verificar se o usuário já está autenticado\r\n    const isAuth = localStorage.getItem('isAuthenticated');\r\n    if (isAuth && isAuth === 'true') {\r\n      this.isAuthenticated = true;\r\n    } else {\r\n      this.isAuthenticated = false;\r\n    }\r\n    \r\n    // Inicializa configuração\r\n    this.realizaConfiguracaoInicial();\r\n  }\r\n\r\n  ionViewWillLeave() {\r\n    this.logout();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    \r\n  }\r\n\r\n  async loadConfiguracoes(){\r\n    const configuracao = await this.configuracaoService.getConfiguracaoById(1);\r\n    if (configuracao){\r\n      this.newConfiguracao = configuracao;\r\n    }\r\n  }\r\n\r\n  async realizaConfiguracaoInicial(){\r\n    const msgRetorno = await  this.configuracaoService.configuracaoInicial();\r\n    if(msgRetorno){\r\n      await this.utilService.showAlert('Configuração', msgRetorno);\r\n      this.loadConfiguracoes();\r\n    }\r\n  }\r\n\r\n  async login() {\r\n    //Código secreto para retornar configuracao inicial  \r\n    if (this.username == 'goodsoft' && this.password == 'G2024soft'){\r\n      this.configuracaoService.deleteConfiguracao(1);\r\n      this.username = '';\r\n      this.password = '';\r\n      this.realizaConfiguracaoInicial();\r\n      return;\r\n    }    \r\n\r\n    const isAuthenticated = await this.configuracaoService.autenticar(this.id, this.username, this.password);\r\n    if (isAuthenticated) {\r\n      this.isAuthenticated = true;\r\n      localStorage.setItem('isAuthenticated', 'true');\r\n      this.username = '';\r\n      this.password = '';\r\n      this.passwordConfirm = '';\r\n      this.loadConfiguracoes();\r\n    } else {\r\n      await this.utilService.showAlert('Erro', 'Login ou senha incorretos.');\r\n    }\r\n  }\r\n\r\n  async atualizarSenha(){\r\n    if (this.passwordConfirm != this.password){\r\n      await this.utilService.showAlert('Erro', 'As senhas informadas não batem.');\r\n      return;\r\n    }\r\n\r\n    this.newConfiguracao.senha = this.password;\r\n\r\n    this.salvarConfiguracao().then(async () => {\r\n      await this.utilService.showAlert('Sucesso', 'Senha atualizada com sucesso.');\r\n      this.logout();\r\n    }).catch(async error => {\r\n      await this.utilService.showAlert('Erro', 'Falha ao atualizar senha. Tente novamente mais tarde.');\r\n      console.error('Erro ao salvar senha:', error);\r\n      this.logout();\r\n    });\r\n  }\r\n\r\n  async atualizarConfiguracoes(){\r\n    this.atualizaConfiguracaoParcial().then(async () => {\r\n      await this.utilService.showAlert('Sucesso', 'Configuração atualizada com sucesso.');\r\n      this.logout();\r\n    }).catch(async error => {\r\n      await this.utilService.showAlert('Erro', 'Falha ao atualizar configurações. Tente novamente mais tarde.');\r\n      console.error('Erro ao salvar configuração:', error);\r\n      this.logout();\r\n    });\r\n  }\r\n\r\n  async salvarConfiguracao(){\r\n     return await this.configuracaoService.salvaConfiguracao(\r\n      this.newConfiguracao.id,\r\n      this.newConfiguracao.login,\r\n      this.newConfiguracao.senha,\r\n      this.newConfiguracao.urlapi,\r\n      this.newConfiguracao.loginsagaz,\r\n      this.newConfiguracao.senhasagaz,\r\n      this.newConfiguracao.diretoriojson\r\n    );\r\n  }\r\n\r\n  async atualizaConfiguracaoParcial(){\r\n    return await this.configuracaoService.atualizaConfiguracaoParcial(\r\n      this.newConfiguracao.id,\r\n      this.newConfiguracao.urlapi,\r\n      this.newConfiguracao.diretoriojson\r\n    );\r\n  }\r\n\r\n  togglePassword(field: string) {\r\n    if (field === 'new') {\r\n      this.passwordTypeNew = this.passwordTypeNew === 'password' ? 'text' : 'password';\r\n    } else if (field === 'confirm') {\r\n      this.passwordTypeConfirm = this.passwordTypeConfirm === 'password' ? 'text' : 'password';\r\n    } else if (field === 'loginpassword') {\r\n      this.passwordType = this.passwordType === 'password' ? 'text' : 'password';\r\n    }\r\n  }\r\n\r\n  async resetDatabase(){\r\n    const alert = await this.alertController.create({\r\n      header: 'Confirmar Reset',\r\n      message: 'Deseja realmente resetar o Banco de Dados? Isso irá apagar todas as informações de descontos, bombas, combustíveis e configurações.',\r\n      buttons: [\r\n        {\r\n          text: 'Cancelar',\r\n          role: 'cancel',\r\n          cssClass: 'secondary',\r\n          handler: () => {\r\n            console.log('Reset cancelado');\r\n          }\r\n        }, {\r\n          text: 'Confirmar',\r\n          handler: () => {\r\n            this.configuracaoService.resetDatabase();\r\n            this.logout();            \r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n\r\n  async logout() {\r\n    localStorage.removeItem('isAuthenticated');\r\n    this.isAuthenticated = false;\r\n    window.location.reload();\r\n    this.router.navigate(['/configuracao']);\r\n  }\r\n\r\n  async exportDatabase(){\r\n    try {\r\n      const arquivoGerado = await this.databaseToJSONService.exportDatabaseToJSON();\r\n\r\n      if (!arquivoGerado){\r\n        await this.utilService.showAlert(`Erro`,`Erro ao exportar Banco de Dados.`);  \r\n        return;\r\n      }\r\n\r\n      await this.utilService.showAlert(`Sucesso`,`Banco de Dados exportado com sucesso.`);  \r\n    } catch (error) {\r\n      await this.utilService.showAlert(`Erro`,`Erro ao exportar Banco de Dados: ${error}.`);  \r\n    }   \r\n  }\r\n\r\n  async importDatabase(){\r\n    try{      \r\n      await this.perguntaImportarDB();\r\n\r\n      if (!this.importDB){\r\n        return;\r\n      } \r\n      \r\n      //Primeiro, chama a api para retornar o arquivo json\r\n      const jsonData = await this.databaseToJSONService.retornaJSON();\r\n\r\n      console.log('Início importação do Banco de Dados');\r\n       \r\n      const DBImportado = await this.databaseToJSONService.importDatabaseFromJSON(jsonData, this.importCombustiveis, this.importBombas);\r\n\r\n      if(DBImportado){\r\n        this.utilService.showAlert('Sucesso','Importação do Bando de Dados realizada com sucesso.');\r\n      }\r\n    } catch (error) {\r\n      this.utilService.showAlert('Erro',`Ocorreu um erro na Importação do Bando de Dados: ${error}`);        \r\n    }\r\n  }\r\n\r\n  async perguntaImportarDB(): Promise<void> {\r\n    return new Promise(async (resolve) => {\r\n      const alert = await this.alertController.create({\r\n        header: 'Importar Banco de Dados',\r\n        message: 'Deseja importar o backup do banco de dados (nome - data arquivo)?',\r\n        buttons: [\r\n          {\r\n            text: 'Não',\r\n            role: 'cancel',\r\n            handler: () => {\r\n              this.importDB = false;\r\n              resolve();\r\n            }\r\n          },\r\n          {\r\n            text: 'Sim',\r\n            handler: async () => {\r\n              this.importDB = true;\r\n              this.importBombas = await this.perguntaImportaTabela('Bombas');\r\n              this.importCombustiveis = await this.perguntaImportaTabela('Combustíveis');\r\n              resolve();\r\n            }\r\n          }\r\n        ]\r\n      });\r\n\r\n      await alert.present();\r\n    });\r\n  }\r\n\r\n  async perguntaImportaTabela(NomeTabela: string): Promise<boolean> {\r\n    return new Promise(async (resolve) => {\r\n      const pronome = NomeTabela.includes(\"Bombas\") ? 'as' : 'os';   \r\n\r\n      const alert = await this.alertController.create({\r\n        header: `Importar ${NomeTabela}`,\r\n        message: `ATENÇÃO!!! Deseja importar ${pronome} ${NomeTabela}? isto irá apagar tod${pronome} ${NomeTabela} atuais e irá cadastrar ${pronome} ${NomeTabela} da importação.`,\r\n        buttons: [\r\n          {\r\n            text: 'Não',\r\n            role: 'cancel',\r\n            handler: () => {\r\n              resolve(false);\r\n            }\r\n          },\r\n          {\r\n            text: 'Sim',\r\n            handler: () => {\r\n              resolve(true);\r\n            }\r\n          }\r\n        ]\r\n      });\r\n\r\n      await alert.present();\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ConfiguracaoPageRoutingModule } from './configuracao-routing.module';\r\n\r\nimport { ConfiguracaoPage } from './configuracao.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ConfiguracaoPageRoutingModule\r\n  ],\r\n  declarations: [ConfiguracaoPage]\r\n})\r\nexport class ConfiguracaoPageModule {}\r\n"],"x_google_ignoreList":[]}